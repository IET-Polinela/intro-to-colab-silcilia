{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyMN3PfFzT/+IHLCUo2NrE+P"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ljsffL3EHU2","executionInfo":{"status":"ok","timestamp":1740975941477,"user_tz":-420,"elapsed":28353,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"69c8fbd3-2fb4-471c-9fdb-cdcb6067b658"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'intro-to-colab-silcilia'...\n","remote: Enumerating objects: 7, done.\u001b[K\n","remote: Counting objects: 100% (7/7), done.\u001b[K\n","remote: Compressing objects: 100% (6/6), done.\u001b[K\n","remote: Total 7 (delta 0), reused 4 (delta 0), pack-reused 0 (from 0)\u001b[K\n","Receiving objects: 100% (7/7), 20.98 KiB | 358.00 KiB/s, done.\n","/content/intro-to-colab-silcilia\n"]}],"source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","# Konfigurasi identitas GitHub\n","!git config --global user.email \"silcilia1605@gmail.com\"\n","!git config --global user.name \"silcilia\"\n","\n","# Clone repository dengan URL yang benar\n","!git clone https://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@github.com/IET-Polinela/intro-to-colab-silcilia.git\n","\n","# Masuk ke direktori repository\n","%cd intro-to-colab-silcilia"]},{"cell_type":"code","source":["!git clone https://github.com/IET-Polinela/intro-to-colab-silcilia.git\n","%cd intro-to-colab-silcilia\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jy7e1enSvak8","executionInfo":{"status":"ok","timestamp":1741169030918,"user_tz":-420,"elapsed":1027,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"a2342cd7-436d-4cd2-a69c-14719acddbc7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'intro-to-colab-silcilia'...\n","remote: Enumerating objects: 12, done.\u001b[K\n","remote: Counting objects: 100% (12/12), done.\u001b[K\n","remote: Compressing objects: 100% (11/11), done.\u001b[K\n","remote: Total 12 (delta 1), reused 8 (delta 0), pack-reused 0 (from 0)\u001b[K\n","Receiving objects: 100% (12/12), 68.85 KiB | 542.00 KiB/s, done.\n","Resolving deltas: 100% (1/1), done.\n","/content/intro-to-colab-silcilia\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","!ls /content/drive/MyDrive/Colab\\ Notebooks/\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aOFkUd1-wzSE","executionInfo":{"status":"ok","timestamp":1741169132682,"user_tz":-420,"elapsed":27289,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"48f719df-c672-47e3-94a7-88b9444c3528"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","'Copy of Welcome To Colab'   Lab1_23758057.ipnyb\n"]}]},{"cell_type":"code","source":["!ls /content/intro-to-colab-silcilia\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bu2rT_W6xW-c","executionInfo":{"status":"ok","timestamp":1741169382512,"user_tz":-420,"elapsed":102,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"0ccca709-b6eb-4e48-a4b1-2aa899a84a7a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["evaluation.txt\tknn_confusion_matrix.png  README.md\n","iris_knn.py\tmnist_cnn.py\t\t  training_performance.png\n"]}]},{"cell_type":"code","source":["!git add Lab1_23758057.ipynb\n","!git commit -m \"Add Lab1_23758057.ipynb\"\n","!git push origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K-RDmVSHvdGF","executionInfo":{"status":"ok","timestamp":1741168725286,"user_tz":-420,"elapsed":325,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"025ea7ac-7792-4c47-df73-2076e10bd89f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: not a git repository (or any of the parent directories): .git\n","fatal: not a git repository (or any of the parent directories): .git\n","fatal: not a git repository (or any of the parent directories): .git\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"oDjisioQvpwj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow import keras\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Load dataset MNIST\n","mnist = keras.datasets.mnist\n","(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","\n","# Normalisasi data\n","X_train, X_test = X_train / 255.0, X_test / 255.0\n","\n","# Buat model CNN\n","model = keras.Sequential([\n","    keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),\n","    keras.layers.MaxPooling2D((2,2)),\n","    keras.layers.Flatten(),\n","    keras.layers.Dense(128, activation='relu'),\n","    keras.layers.Dense(10, activation='softmax')\n","])\n","\n","# Compile model\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","\n","# Training model & simpan history\n","history = model.fit(X_train.reshape(-1,28,28,1), y_train, epochs=5, validation_data=(X_test.reshape(-1,28,28,1), y_test))\n","\n","# Evaluasi model\n","test_loss, test_acc = model.evaluate(X_test.reshape(-1,28,28,1), y_test)\n","print(f\"Test accuracy: {test_acc:.2f}\")\n","\n","# Simpan hasil evaluasi ke file teks\n","with open(\"evaluation.txt\", \"w\") as f:\n","    f.write(f\"Test Loss: {test_loss:.4f}\\n\")\n","    f.write(f\"Test Accuracy: {test_acc:.4f}\\n\")\n","\n","print(\"Evaluation results saved to evaluation.txt.\")\n","\n","# Visualisasi Loss & Akurasi\n","history_dict = history.history\n","fig, ax = plt.subplots(1, 2, figsize=(12, 5))\n","\n","# Plot Loss\n","ax[0].plot(history_dict['loss'], label='Train Loss', marker='o')\n","ax[0].plot(history_dict['val_loss'], label='Validation Loss', marker='o')\n","ax[0].set_title(\"Model Loss\")\n","ax[0].set_xlabel(\"Epoch\")\n","ax[0].set_ylabel(\"Loss\")\n","ax[0].legend()\n","\n","# Plot Accuracy\n","ax[1].plot(history_dict['accuracy'], label='Train Accuracy', marker='o')\n","ax[1].plot(history_dict['val_accuracy'], label='Validation Accuracy', marker='o')\n","ax[1].set_title(\"Model Accuracy\")\n","ax[1].set_xlabel(\"Epoch\")\n","ax[1].set_ylabel(\"Accuracy\")\n","ax[1].legend()\n","\n","# Simpan grafik ke dalam file\n","plt.savefig(\"training_performance.png\")\n","plt.show()\n","\n","print(\"Training performance plot saved to training_performance.png.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":748},"id":"MLNTQvmaNCXD","executionInfo":{"status":"ok","timestamp":1740975323104,"user_tz":-420,"elapsed":171001,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"0b6e63d4-eb80-4a34-b0c2-80a673a02fb6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 14ms/step - accuracy: 0.9103 - loss: 0.3036 - val_accuracy: 0.9750 - val_loss: 0.0730\n","Epoch 2/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 13ms/step - accuracy: 0.9843 - loss: 0.0530 - val_accuracy: 0.9823 - val_loss: 0.0484\n","Epoch 3/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 13ms/step - accuracy: 0.9903 - loss: 0.0299 - val_accuracy: 0.9861 - val_loss: 0.0417\n","Epoch 4/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 14ms/step - accuracy: 0.9941 - loss: 0.0192 - val_accuracy: 0.9859 - val_loss: 0.0478\n","Epoch 5/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m25s\u001b[0m 13ms/step - accuracy: 0.9963 - loss: 0.0120 - val_accuracy: 0.9853 - val_loss: 0.0498\n","\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9812 - loss: 0.0620\n","Test accuracy: 0.99\n","Evaluation results saved to evaluation.txt.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Training performance plot saved to training_performance.png.\n"]}]},{"cell_type":"code","source":["%%writefile iris_knn.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IdLJlMTlEag0","executionInfo":{"status":"ok","timestamp":1740972900312,"user_tz":-420,"elapsed":141,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"3ce70ac3-308a-4ac3-b085-6c23e3dbd9c8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing iris_knn.py\n"]}]},{"cell_type":"code","source":["!python iris_knn.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wHnK1OcBFIIz","executionInfo":{"status":"ok","timestamp":1740973195694,"user_tz":-420,"elapsed":3216,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"4decfe3a-46f0-48a9-9092-5e38548707bb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Accuracy: 0.93\n","Figure(600x400)\n"]}]},{"cell_type":"code","source":["!git add .\n","!git commit -m “iris_knn.py”\n","!git push origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ArtBgn6BFqEF","executionInfo":{"status":"ok","timestamp":1740973565516,"user_tz":-420,"elapsed":844,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"0fc200b2-7d6d-4d12-f9e3-dd9e4f70b790"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[main 2c3e842] “iris_knn.py”\n"," 2 files changed, 46 insertions(+)\n"," create mode 100644 iris_knn.py\n"," create mode 100644 knn_confusion_matrix.png\n","Enumerating objects: 5, done.\n","Counting objects: 100% (5/5), done.\n","Delta compression using up to 2 threads\n","Compressing objects: 100% (4/4), done.\n","Writing objects: 100% (4/4), 20.10 KiB | 10.05 MiB/s, done.\n","Total 4 (delta 0), reused 0 (delta 0), pack-reused 0\n","To https://github.com/IET-Polinela/intro-to-colab-silcilia.git\n","   5c7b4a6..2c3e842  main -> main\n"]}]},{"cell_type":"code","source":["%%writefile mnist_cnn.py\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Load dataset MNIST\n","mnist = keras.datasets.mnist\n","(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","\n","# Normalisasi data\n","X_train, X_test = X_train / 255.0, X_test / 255.0\n","\n","# Buat model CNN\n","model = keras.Sequential([\n","    keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),\n","    keras.layers.MaxPooling2D((2,2)),\n","    keras.layers.Flatten(),\n","    keras.layers.Dense(128, activation='relu'),\n","    keras.layers.Dense(10, activation='softmax')\n","])\n","\n","# Compile model\n","model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","\n","# Training model & simpan history\n","history = model.fit(X_train.reshape(-1,28,28,1), y_train, epochs=5,\n","                    validation_data=(X_test.reshape(-1,28,28,1), y_test))\n","\n","# Evaluasi model\n","test_loss, test_acc = model.evaluate(X_test.reshape(-1,28,28,1), y_test)\n","print(f\"Test accuracy: {test_acc:.2f}\")\n","\n","# Simpan hasil evaluasi ke file teks\n","with open(\"evaluation.txt\", \"w\") as f:\n","    f.write(f\"Test Loss: {test_loss}\\n\")\n","    f.write(f\"Test Accuracy: {test_acc:.2f}\\n\")\n","print(\"Evaluation results saved to evaluation.txt.\")\n","\n","# Visualisasi Loss & Akurasi\n","history_dict = history.history\n","fig, ax = plt.subplots(1, 2, figsize=(12, 4))\n","\n","# Plot Loss\n","ax[0].plot(history_dict['loss'], label=\"Train Loss\", marker='o')\n","ax[0].plot(history_dict['val_loss'], label=\"Validation Loss\", marker='o')\n","ax[0].set_title(\"Model Loss\")\n","ax[0].set_xlabel(\"Epochs\")\n","ax[0].set_ylabel(\"Loss\")\n","ax[0].legend()\n","\n","# Plot Accuracy\n","ax[1].plot(history_dict['accuracy'], label=\"Train Accuracy\", marker='o')\n","ax[1].plot(history_dict['val_accuracy'], label=\"Validation Accuracy\", marker='o')\n","ax[1].set_title(\"Model Accuracy\")\n","ax[1].set_xlabel(\"Epochs\")\n","ax[1].set_ylabel(\"Accuracy\")\n","ax[1].legend()\n","\n","# Simpan grafik ke dalam file\n","plt.savefig(\"training_performance.png\")\n","plt.show()\n","\n","print(\"Training performance plot saved to training_performance.png.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WqgzFSJuO6Kj","executionInfo":{"status":"ok","timestamp":1740975960045,"user_tz":-420,"elapsed":167,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"76904313-4f3c-40c1-daf5-c550b989d360"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing mnist_cnn.py\n"]}]},{"cell_type":"code","source":["!python mnist_cnn.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J9tC0sHPO_1o","executionInfo":{"status":"ok","timestamp":1740976032459,"user_tz":-420,"elapsed":52382,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"f4c251d5-7f0c-4ea6-eb8f-7629c9c39b05"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2025-03-03 04:24:31.423445: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","E0000 00:00:1740975871.457012    1163 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","E0000 00:00:1740975871.466633    1163 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","2025-03-03 04:24:31.499797: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n","To enable the following instructions: AVX2 AVX512F FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","2025-03-03 04:24:36.842597: W tensorflow/core/common_runtime/gpu/gpu_bfc_allocator.cc:47] Overriding orig_value setting because the TF_FORCE_GPU_ALLOW_GROWTH environment variable is set. Original config value was 0.\n","I0000 00:00:1740975876.844767    1163 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\n","Epoch 1/5\n","WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","I0000 00:00:1740975879.626914    1207 service.cc:148] XLA service 0x7d6234006b90 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n","I0000 00:00:1740975879.626989    1207 service.cc:156]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\n","2025-03-03 04:24:39.681210: I tensorflow/compiler/mlir/tensorflow/utils/dump_mlir_util.cc:268] disabling MLIR crash reproducer, set env var `MLIR_CRASH_REPRODUCER_DIRECTORY` to enable.\n","I0000 00:00:1740975879.811844    1207 cuda_dnn.cc:529] Loaded cuDNN version 90300\n","2025-03-03 04:24:40.635896: I external/local_xla/xla/service/gpu/autotuning/conv_algorithm_picker.cc:557] Omitted potentially buggy algorithm eng14{k25=0} for conv (f32[32,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[32,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kNone\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]}\n","I0000 00:00:1740975881.751849    1207 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","\u001b[1m1873/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9152 - loss: 0.28442025-03-03 04:24:46.723371: I external/local_xla/xla/service/gpu/autotuning/conv_algorithm_picker.cc:557] Omitted potentially buggy algorithm eng14{k25=0} for conv (f32[32,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[32,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kRelu\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]}\n","2025-03-03 04:24:47.617877: I external/local_xla/xla/service/gpu/autotuning/conv_algorithm_picker.cc:557] Omitted potentially buggy algorithm eng14{k25=0} for conv (f32[16,32,26,26]{3,2,1,0}, u8[0]{0}) custom-call(f32[16,1,28,28]{3,2,1,0}, f32[32,1,3,3]{3,2,1,0}, f32[32]{0}), window={size=3x3}, dim_labels=bf01_oi01->bf01, custom_call_target=\"__cudnn$convBiasActivationForward\", backend_config={\"cudnn_conv_backend_config\":{\"activation_mode\":\"kRelu\",\"conv_result_scale\":1,\"leakyrelu_alpha\":0,\"side_input_scale\":0},\"force_earliest_schedule\":false,\"operation_queue_id\":\"0\",\"wait_on_operation_queues\":[]}\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 4ms/step - accuracy: 0.9153 - loss: 0.2842 - val_accuracy: 0.9816 - val_loss: 0.0567\n","Epoch 2/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9843 - loss: 0.0507 - val_accuracy: 0.9856 - val_loss: 0.0415\n","Epoch 3/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9909 - loss: 0.0291 - val_accuracy: 0.9878 - val_loss: 0.0404\n","Epoch 4/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - accuracy: 0.9937 - loss: 0.0185 - val_accuracy: 0.9878 - val_loss: 0.0410\n","Epoch 5/5\n","\u001b[1m1875/1875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 3ms/step - accuracy: 0.9963 - loss: 0.0117 - val_accuracy: 0.9858 - val_loss: 0.0471\n","\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9812 - loss: 0.0630\n","Test accuracy: 0.99\n","Evaluation results saved to evaluation.txt.\n","Figure(1200x400)\n","Training performance plot saved to training_performance.png.\n"]}]},{"cell_type":"code","source":["!git add mnist_cnn.py training_performance.png evaluation.txt\n","!git commit -m “mnist_knn.py”\n","!git push origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iVAib6TgQmps","executionInfo":{"status":"ok","timestamp":1740976139861,"user_tz":-420,"elapsed":3840,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"1b997fae-c5e2-4597-91fa-2dbcedf324db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[main 80dc1a3] “mnist_knn.py”\n"," 3 files changed, 66 insertions(+)\n"," create mode 100644 evaluation.txt\n"," create mode 100644 mnist_cnn.py\n"," create mode 100644 training_performance.png\n","Enumerating objects: 6, done.\n","Counting objects: 100% (6/6), done.\n","Delta compression using up to 2 threads\n","Compressing objects: 100% (5/5), done.\n","Writing objects: 100% (5/5), 48.01 KiB | 16.00 MiB/s, done.\n","Total 5 (delta 0), reused 0 (delta 0), pack-reused 0\n","To https://github.com/IET-Polinela/intro-to-colab-silcilia.git\n","   2c3e842..80dc1a3  main -> main\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v_ZCaur8R5Ru","executionInfo":{"status":"ok","timestamp":1745206539294,"user_tz":-420,"elapsed":34733,"user":{"displayName":"Silcilia","userId":"10721224051707846595"}},"outputId":"a89b1c35-e5bc-40cc-bf11-748aa425785a"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"MainJ6PvZ15f"},"execution_count":null,"outputs":[]}]}